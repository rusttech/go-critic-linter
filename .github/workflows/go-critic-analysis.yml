name: Go Critic Analysis

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 0 * * *' # 每天运行一次

permissions:  # 不然无法把运行结果写在issue的评论里
  issues: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install go-critic
        run: |
          go install github.com/go-critic/go-critic/cmd/gocritic@latest
        shell: bash

      - name: Add Go binaries to PATH
        run: |
          echo "$HOME/go/bin" >> $GITHUB_PATH
        shell: bash

      - name: Debug environment
        run: |
          echo "Current shell: $SHELL"
          echo "Current PATH: $PATH"
          which mkdir
        shell: bash

      - name: Read repo.txt and analyze each repository
        run: |
          # 创建一个临时目录用于克隆仓库
          mkdir repos
          cd repos

          # 循环处理 repo.txt 中的每个仓库
          while IFS= read -r repo; do
            echo "Processing $repo"
            repo_name=$(basename -s .git "$repo")

            # 克隆仓库
            git clone "$repo" "$repo_name"
            cd "$repo_name"
            pwd
            ls

            # 运行 go-critic
            gocritic check  -disable offBy1,defaultCaseOrder > ../../gocritic-report-$repo_name.txt 
            #gocritic check  -disable sloppyTypeAssert,singleCaseSwitch,captLocal,ifElseChain,caseOrder,unslice,commentFormatting,assignOp,exitAfterDefer,elseif,wrapperFunc,unlambda,underef,badCall,dupSubExpr,sloppyLen,offBy1,defaultCaseOrder > ../../gocritic-report-$repo_name.txt || true

            # 返回 repos 目录
            cd ..
          done < ../repo.txt
        shell: bash

      - name: Collect analysis reports
        run: |
          # 将所有 go-critic 报告合并到一个文件中
          cat gocritic-report-*.txt > ../gocritic-issues-summary.txt
        shell: bash

      - name: 读取并保存报告内容
        id: get-reports
        run: |
          # 读取不同文件的内容
          GO_REPORT=$(cat gocritic-report-go.txt || echo "go.txt 没有生成报告")
          HELMFILE_REPORT=$(cat gocritic-report-helmfile.txt || echo "helmfile.txt 没有生成报告")

          # 设置为环境变量
          echo "go_report<<EOF" >> $GITHUB_ENV
          echo "$GO_REPORT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "helmfile_report<<EOF" >> $GITHUB_ENV
          echo "$HELMFILE_REPORT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      - name: 输出环境变量进行调试
        run: |
          cat /home/runner/work/go-critic-linter/go-critic-linter/repos/go/README.md
          echo 123
          cat /home/runner/work/go-critic-linter/go-critic-linter/repos/go/gocritic-report-go.txt
          echo "Go report: ${{ env.go_report }}"
          echo "Helmfile report: ${{ env.helmfile_report }}"
        shell: bash

      - name: Create or update issue with analysis results
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: 1
          body: |
            ## Go-Critic 静态分析报告
            以下是 go-critic 发现的问题：

            ### Go 报告:
            ```
            ${{ env.go_report }}
            ```

            ### Helmfile 报告:
            ```
            ${{ env.helmfile_report }}
            ```